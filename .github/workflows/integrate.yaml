# Automatically build and test HeardIT back-end on push and pull-request using GitHub Actions.
name: HeardIT pipeline

on:
    push:
        branches: ["*"]
    pull_request:
        branches: ["*"]

env:
    REGISTRY: ghcr.io
    GCP_PROJECT_ID: heardit-k8s
    GCP_ZONE: europe-west4
    CLUSTER_NAME: heardit-cluster-production

jobs:
    build_and_test_search_service:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: heardit_search_service
        steps:
            - name: Checkout branch
              uses: actions/checkout@v4
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"

            - name: Setup Gradle
              uses: gradle/gradle-build-action@v3
            - name: Make gradlew executable
              run: chmod +x ./gradlew
            - name: Build with Gradle Wrapper
              run: ./gradlew build

            - name: Run Tests
              run: ./gradlew test

    build_and_test_songmanager_service:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: heardit_songmanager_service
        steps:
            - name: Checkout branch
              uses: actions/checkout@v4
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"
            - name: Export GCP credentials
              run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/gcp-key.json
            - name: Set GOOGLE_APPLICATION_CREDENTIALS
              run: echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json" >> $GITHUB_ENV
            - name: Setup Gradle
              uses: gradle/gradle-build-action@v3
            - name: Make gradlew executable
              run: chmod +x ./gradlew
            - name: Build with Gradle Wrapper
              run: ./gradlew build

            - name: Run Tests
              run: ./gradlew test

    load-test:
        runs-on: ubuntu-latest
        needs:
            [build_and_test_search_service, build_and_test_songmanager_service]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        steps:
            - name: Check out the repository
              uses: actions/checkout@v4

            - name: Install AnyConnect VPN & Login
              run: |
                  sudo apt-get update
                  sudo /sbin/modprobe tun
                  sudo apt-get install openconnect
                  printf 'Netlab Fontys ICT\n${{secrets.VPN_USERNAME}}\n${{secrets.VPN_PASSWORD}}\n' | sudo openconnect vpnnetlab.fhict.nl -b

            - name: Setup SSH
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_NETLAB_PRIVATE }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan 192.168.144.8 >> ~/.ssh/known_hosts

            - name: Run k6 load test on remote server
              run: |
                  ssh -o StrictHostKeyChecking=no student@192.168.144.8 << EOF
                    cd ~/Desktop
                    k6 run loadTest1.js
                  EOF

    publish-docker-Hub-search-service:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: heardit_search_service
        needs: load-test
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker
              uses: docker/setup-buildx-action@v1

            - name: Build and push Docker image
              run: |
                  docker build -t jumorto/heardit-search-service .
                  docker login -u jumorto -p ${{ secrets.DOCKERHUB_TOKEN }}
                  docker push jumorto/heardit-search-service

    publish-docker-Hub-songmanager-service:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: heardit_songmanager_service
        needs: load-test
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker
              uses: docker/setup-buildx-action@v1

            - name: Build and push Docker image
              run: |
                  docker build -t jumorto/heardit-songmanager-service .
                  docker login -u jumorto -p ${{ secrets.DOCKERHUB_TOKEN }}
                  docker push jumorto/heardit-songmanager-service

    deploy-to-gke:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: deploymentFiles
        needs:
            [
                publish-docker-Hub-search-service,
                publish-docker-Hub-songmanager-service,
            ]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v0.3.0
              with:
                  version: "latest"
                  project_id: ${{ env.GCP_PROJECT_ID }}
                  service_account_key: ${{ secrets.GCP_SA_KEY }}

            - name: Set up GKE
              run: |
                  gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.GCP_ZONE }} --project ${{ env.GCP_PROJECT_ID }}

            - name: Install gke-gcloud-auth-plugin
              run: |
                  gcloud components install kubectl
                  gcloud components update

            - name: Apply Kubernetes configuration
              run: |
                  kubectl apply -f hearditgke.yaml
                  kubectl rollout restart deployment
